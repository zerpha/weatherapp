{"version":3,"sources":["photos/weather-icon.png","components/weather.component.jsx","components/form.component.jsx","components/head.component.jsx","components/toggle.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Weather","props","className","city","weatherIcon","undefined","temperature","min","max","tempflag","minmaxTemp","temp_min","temp_max","changetemp","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","Head","Navbar","Brand","src","require","width","height","alt","Toggle","onClick","id","readOnly","htmlFor","App","changeTemp","e","a","fahrFlag","setState","Math","round","state","getWeather","preventDefault","country","target","elements","value","fetch","api_call","json","response","console","log","cod","sys","calFahrenheit","main","temp","weather","get_WeatherIcon","document","body","style","background","icon","color","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeId","this","background_type","fahrflag","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1fef0141.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/weather-icon.a296a54d.png\";","import React from 'react';\r\nimport \"./weather.style.css\";\r\n\r\n// uses basic bootstrap to format \r\nconst Weather = props => {\r\n    return (\r\n        <div className = \"container\">\r\n            <div className=\"cards pt-4\">\r\n                <h1>\r\n                    {props.city}\r\n                </h1>\r\n                <h5 className=\"py-4\">\r\n                    <i className = {`wi ${props.weatherIcon} display-3`}></i>\r\n                </h5>\r\n\r\n                {props.temperature !== undefined ? (\r\n                    <h1 className=\"py-2\">{props.temperature}&deg;</h1>) : null}\r\n\r\n                {minmaxTemp(props.temp_min, props.temp_max, props.changetemp)}\r\n\r\n                <h4 className=\"py-3 text-capitalize\">{props.description}</h4>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction minmaxTemp(min, max, tempflag) {\r\n    if (max !== undefined && min !== undefined) {\r\n      return (\r\n        <h3>\r\n          <span className=\"px-4\">{min}&deg;</span>\r\n          <span className=\"px-4\">{max}&deg;</span>\r\n        </h3>\r\n      );\r\n    }\r\n  }\r\n\r\n\r\nexport default Weather;","import React from 'react'\r\nimport \"./form.style.css\"\r\n\r\nconst Form = props => {\r\n    return (\r\n        <div className = \"container\">\r\n            <br></br>\r\n            <div>{props.error ? error() : null}</div>\r\n            <form onSubmit={props.loadweather}>\r\n                <div className = \"row\">\r\n                    <div className = \"col-md-3 offset-md-2\">\r\n                        <input \r\n                        type= \"text\" \r\n                        className=\"form-control\" \r\n                        name = \"city\" \r\n                        autoComplete=\"off\"\r\n                        placeholder =\"City\" />\r\n                    </div>\r\n                    <div className = \"col-md-3\">\r\n                        <input \r\n                        type= \"text\" \r\n                        className=\"form-control\" \r\n                        name = \"country\" \r\n                        autoComplete=\"off\"\r\n                        placeholder =\"Country\"/>\r\n                    </div>\r\n                    <div className = \"col-md-3 mt-md-0 text-md-left\">\r\n                        <button className = \"btn btn-warning\"> Check Weather </button> \r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction error(){\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\" role = \"alert\">\r\n            Please Enter a Valid City and Country\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react'\r\nimport {Navbar} from 'react-bootstrap'\r\nimport './head.style.css'\r\n\r\n\r\nconst Head = () => {\r\n    return(\r\n        <Navbar className = \"navi\">\r\n            <Navbar.Brand>\r\n                <img\r\n                    src= {require('C:/Users/henry/OneDrive/Documents/weatherapp/src/photos/weather-icon.png')}\r\n                    width=\"30\"\r\n                    height=\"30\"\r\n                    className=\"d-inline-block align-top\"\r\n                    alt=\"logo\"\r\n                />\r\n                &nbsp; Check the Weather!\r\n            </Navbar.Brand>\r\n\r\n        </Navbar>\r\n    );\r\n  };\r\n\r\n  export default Head;","import React from 'react'\r\n\r\nconst Toggle = props => {\r\n    return(\r\n        <div className='custom-control custom-switch'>\r\n        <input \r\n          onClick = {props.changetemp}\r\n          type='checkbox'\r\n          className='custom-control-input'\r\n          id='customSwitches'\r\n          readOnly\r\n        />\r\n        <label className='custom-control-label' htmlFor='customSwitches'>\r\n          Check in Celcius\r\n        </label>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Toggle;","import React from 'react';\nimport './App.css';\n\nimport 'weather-icons/css/weather-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Weather from './components/weather.component';\nimport Form from './components/form.component'\nimport Head from './components/head.component'\nimport Toggle from './components/toggle.component';\n\nconst API_key =\"887bd16f039b21c69183f3d11de690c5\";\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      temperature: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false,\n      color: '#ffcce6',\n      fahrFlag: true\n    };\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  calFahrenheit(temp){\n    let fahr = Math.round(((temp - 273.15) * 1.8) + 32);\n    return fahr;\n  }\n\n  changeTemp = async(e) =>{\n    this.fahrFlag = !this.fahrFlag;\n    this.fahrFlag ? \n      this.setState({\n        temperature: Math.round((this.state.temperature -32) * (5/9)),\n        temp_max: Math.round((this.state.temp_max -32) * (5/9)),\n        temp_min: Math.round((this.state.temp_min -32) * (5/9)),\n      })\n      :\n      this.setState({\n        temperature: Math.round((this.state.temperature * 1.8) + 32),\n        temp_max: Math.round((this.state.temp_max * 1.8) + 32),\n        temp_min: Math.round((this.state.temp_min * 1.8) + 32),\n      })\n  }\n\n  // The weather icon are taken from the weatherAPI\n  // and is based on the id of the weather \n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({ icon: icons.Thunderstorm });\n        this.setState({ color: '#ffffcc'});\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: icons.Drizzle });\n        this.setState({ color: '#ccffff'});\n        break;\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({ icon: icons.Rain });\n        this.setState({ color: '#ccd9ff'});\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: icons.Snow });\n        this.setState({ color: '#ccccff'});\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: icons.Atmosphere });\n        this.setState({ color: '#ffcccc'});\n        break;\n      case rangeId === 800:\n        this.setState({ icon: icons.Clear });\n        this.setState({ color: '#ccffcc'});\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: icons.Clouds });\n        this.setState({ color: '#ccffe6'});\n        break;\n      default:\n        this.setState({ icon: icons.Clouds });\n        this.setState({ color: '#ffcce6'});\n    }\n  }\n\n  // async to have changes reactively\n  getWeather = async (e) => {\n    e.preventDefault();\n\n    const country = e.target.elements.country.value;\n    const city = e.target.elements.city.value;\n\n\n      const api_call = await fetch(\n        `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`);\n\n      const response = await api_call.json();\n      console.log(response)\n\n      if (country && city && response.cod !== \"404\") {\n\n      this.setState({\n        city: `${response.name}, ${response.sys.country}`,\n        country: response.sys.country,\n        temperature: this.calFahrenheit(response.main.temp),\n        temp_max: this.calFahrenheit(response.main.temp_max),\n        temp_min: this.calFahrenheit(response.main.temp_min),\n        description: response.weather[0].description,\n        error: false\n      });\n\n      // setting icons\n      this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n      document.body.style.background = \"white\";\n\n      console.log(response);\n    } else {\n      this.setState({\n        error: true\n      });\n    }\n  };\n\n\n  render(){\n    const background_type = {\n      background: this.state.color\n    };\n    return(\n      <div style = {background_type} className=\"App\">\n        <Head />\n        <Form loadweather={this.getWeather} error={this.state.error}/>\n        <Weather city = {this.state.city} country = {this.state.country} \n        temperature = {this.state.temperature} temp_max = {this.state.temp_max}\n        temp_min = {this.state.temp_min} description= {this.state.description}\n        weatherIcon = {this.state.icon} fahrflag = {this.state.fahrFlag}/>\n        <Toggle changetemp = {this.changeTemp}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}